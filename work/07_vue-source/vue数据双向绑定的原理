### 数据代理(浅代理 不需要深度代理)
    将data中的数据(data对象的属性 数据描述符)拿出来转绑给实例对象
    将数据描述符 转化成 访问描述符(给vm实例对象新增属性)

### 数据劫持(深度劫持)
     将data中的数据(data对象的属性 数据描述符)拿出来重新定义
     将数据描述符 转化成 访问描述符(给data属性进行重新定义)

### 模板解析(指令解析 v-text v-html v-modle v-class v-on:click {{}} + 表达式解析)
    1. 找到对应的挂载节点 将挂载节点下的所有子节点统一剪切到一个文档碎片中
    2. 解析文档碎片(深度解析)
        init :
            模板编译的入口方法
          compileElement :
            拿出文档碎片中子节点 根据子节点的类型不同 调不一样的编译方法
            如果存在子孙节点 会进行递归解析
                元素节点 --> compile
                        循环元素身上所有的属性 判断属性是否是vue指令 根据指令调用不同的工具类
                            普通指令 compileUtil[dir]
                                bind : 所有指令都会调用的公共方法
                                        寻找对应的更新器 为更新器指定修改的节点 以及 内容
                                            this._getVMVal(vm, exp) : 根据表达式 去 data中找值
                                            updater : 每一个指令最终都会来执行一个更新器!!!
                            事件指令 compileUtil.eventHandler
                包含{{}}的文本节点 --> compileText
                         compileUtil.text: 模板解析的工具类
                            bind : 所有指令都会调用的公共方法
                                    寻找对应的更新器 为更新器指定修改的节点 以及 内容
                                        this._getVMVal(vm, exp) : 根据表达式 去 data中找值
                                        updater : 每一个指令最终都会来执行一个更新器!!!
    3. 将解析完的文档碎片挂回到挂载节点下

### 数据单向流 & 数据双向流
    dep 和 watcher的关系
        dep 代表 一个个data中属性
        watcher 代表 一个指令

        dep和watcher之间是多对多的关系:
            1个属性 很有可能 要被多个指令引用
                dep.id
                dep.subs = [watcher,watcher]

                watcher.cb = updater
            1个指令 可以 包含多个属性
