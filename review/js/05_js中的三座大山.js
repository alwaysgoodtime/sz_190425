/*
1. 作用域 & 作用域链
    左查询 & 右查询
2. 执行上下文 & 执行上下文栈
    提升
    this
    闭包
3. 原型 & 原型链
    为了给变量的查询制定规则
    为了给属性的查询制定规则
*/



/*
    左查询  : 对等号左边的变量进行查询
         如果整条作用域都没有a的声明则 在全局环境中定义一个
    右查询  : 对等号非左边的变量进行查询
        如果整条作用域都没有a的声明则报错 ReferenceError:
*/

/*
    提升
        函数提升 与 变量提升
        函数提升是整体的提升 变量提升是声明的提升
        函数提升要优于变量提升
* */

/*
    this(this一般是函数的一个内部特征)
        this指向于谁 看函数调用位置的调用形式
            fn()            普通调用 this---> window
            obj.fn()        隐式调用 this--> obj
            obj.call(obj)
            obj.apply(obj)  显示调用 this--> 指定的对象
            new fn()        构造调用 this--> 构造出来的实例对象

         大部分情况下 开发者是看不到函数的调用位置上调用形式的
            回调函数的this指向是需要查阅API的

         硬绑定  &  隐式丢失
            fn.bind(obj)

         this指向在es6的箭头函数中 和 作用域挂上了钩
* */


/*
    闭包:
        当函数可以记住并访问自己的作用域链时 就会产生闭包
*/

